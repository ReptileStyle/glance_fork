/*
 * Copyright 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//import androidx.build.LibraryType

plugins {
//    id("AndroidXPlugin")
    id("com.android.library")
    id("org.jetbrains.kotlin.android")
    id('maven-publish')
//    id("AndroidXComposePlugin")
}

dependencies {

    api("androidx.annotation:annotation:1.2.0")
    api("androidx.compose.runtime:runtime:1.2.1")
    api("androidx.compose.ui:ui-graphics:1.1.1")
    api("androidx.compose.ui:ui-unit:1.1.1")
    api("androidx.datastore:datastore-core:1.0.0")
    api("androidx.datastore:datastore-preferences-core:1.0.0")
    api("androidx.datastore:datastore-preferences:1.0.0")

    implementation("androidx.annotation:annotation:1.1.0")
    implementation("androidx.work:work-runtime:2.7.1")
    implementation("androidx.work:work-runtime-ktx:2.7.1")
    implementation ("org.jetbrains.kotlin:kotlin-stdlib:1.8.10")
//    implementation(libs.kotlinStdlib)

    // Force upgrade since 1.2.0 is not compatible with latest lint.
    implementation("androidx.annotation:annotation-experimental:1.3.0")

    def kotlin = "1.8.10"
    def androidxTestRunner = "1.6.0-alpha01"
    def androidxTestRules = "1.6.0-alpha01"
    def kotlinCoroutines = "1.6.4"
    def androidxTestCore = "1.6.0-alpha01"
    def espresso = "3.6.0-alpha01"
    def androidxTestExtJunit = "1.2.0-alpha01"
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutines")
    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin")
    testImplementation("org.mockito:mockito-core:4.8.0")
    testImplementation("org.mockito.kotlin:mockito-kotlin:4.0.0")
    testImplementation("org.robolectric:robolectric:4.10.3")
    testImplementation("androidx.test:core:$androidxTestCore")
    testImplementation("androidx.test:rules:$androidxTestRules")
    testImplementation("androidx.test:runner:$androidxTestRunner")
    testImplementation("com.google.truth:truth:1.0.1")
    testImplementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin")
    testImplementation('androidx.core:core-ktx:1.7.0')
    testImplementation("androidx.datastore:datastore-core:1.0.0")
    testImplementation("androidx.datastore:datastore-preferences-core:1.0.0")
    testImplementation("androidx.datastore:datastore-preferences:1.0.0")

//    androidTestImplementation(project(":test:screenshot:screenshot"))
    androidTestImplementation("androidx.test.uiautomator:uiautomator:2.2.0")
    androidTestImplementation("androidx.room:room-runtime:2.2.5")
    androidTestImplementation('androidx.core:core-ktx:1.7.0')
    androidTestImplementation("androidx.work:work-testing:2.7.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso")
    androidTestImplementation("androidx.test.espresso:espresso-idling-resource:$espresso")
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutines")
    androidTestImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin")
    androidTestImplementation("androidx.test:core:$androidxTestCore")
    androidTestImplementation("androidx.test.ext:junit:$androidxTestExtJunit")
    androidTestImplementation("androidx.test.ext:junit-ktx:$androidxTestExtJunit")
    androidTestImplementation("androidx.test:rules:$androidxTestRules")
    androidTestImplementation("androidx.test:runner:$androidxTestRunner")
    androidTestImplementation("com.google.truth:truth:1.0.1")
    androidTestImplementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin")

}
//tasks.withType(KotlinCompile).configureEach {
//    kotlinOptions {
//        freeCompilerArgs += [
//                "-Xjvm-default=all",
//        ]
//    }
//}

android {

    compileSdk 33
    // Use Robolectric 4.+
    testOptions.unitTests.includeAndroidResources = true
    resourcePrefix "glance_"
    namespace "androidx.glance"
    defaultConfig {
        minSdk 21
        targetSdk 33
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.github.kuzevanov'
            artifactId = 'glance'
            version = "1.0"
            afterEvaluate {
                from components.release
            }


        }
    }
}
//androidx {
//    name = "Glance"
//    type = LibraryType.PUBLISHED_LIBRARY
//    inceptionYear = "2021"
//    description = "Glance allows developers to build layouts for remote surfaces using a Jetpack " +
//            "Compose-style API."
//    targetsJavaConsumers = false
//}
